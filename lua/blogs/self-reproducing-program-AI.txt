<p>　　最近读到冯·诺依曼的《<a href="http://book.douban.com/subject/2982694/">Theory of Self-Reproducing Automata</a>》的<a href="http://www.douban.com/note/163931886/">中译本</a>，被自复制自动机理论深深吸引了！</p>
<p>　　生命是什么？这本书让我对生命有了新的认识。</p>
<p>　　热力学第二定律是宇宙的死亡法则：系统的熵总是趋于增加，系统总是由有序趋向无序，由有形趋向混沌，最后终结于热寂。宇宙万物都逃不过这条法则，唯有生命例外。通过与外界交换能量，生命可以保持内在的有序。只有生命可以违抗热力学第二定律。</p>
<p>　　热力学与信息论有着内在联系：一个系统越有序，它包含的信息就越多；一个系统越无序，它包含的信息就越少。信息总是沿着减少的方向流动。只有生命可以抗拒这个规律：生命可以“创造”出信息。“创造”是生命之所以为生命的本质。</p>
<p>　　生命的另一个神奇之处是，他们自己包含了自己的全部信息，他们自己可以产生一个跟自己一样的新生命。唯有生命可以做到自己创造自己。</p>
<p>　　冯·诺依曼认为，一个简单的系统是无法抗拒热力学第二定律的，这样的系统只会越来越趋向于无序，能量会向更低的方向流动，信息会越来越少。只有当系统复杂到某一个程度的时候，不妨设为临界点 C ，一旦越过了这个临界点，系统可以自己创造自己，这样系统就可以逆热力学第二定律而上，并且变得越来越复杂。</p>
<p>　　这里的临界点 C 跟不少人提出的“技术奇异点”是一样的：人们认为，当人工智能达到了这样一种程度，即它们可以自己创造自己的时候，这就是人工智能真正觉醒的时候。“奇异点”就是机器可以自己造出自己的时候，“奇异点”之后，机器将进化，并且变得越来越复杂，超出人类所能理解的范围，它们在某种程度上已经具备了生命的特质，那将是人工智能的时代。</p>
<p>　　总而言之，生命之所以区别于世界万物，就在于生命可以包含自己的全部信息。所以下面就是我们的问题了：</p>

<blockquote>
	<div>问题（自产生程序）：编写一个程序，不读取任何输入，只把自己的源代码输出。</div>
</blockquote>

<p>　　这个问题是个非常本质的问题，跟使用什么编程语言无关（不要想到使用反射之类的东西）。</p>

<p>　　试想，如果要输出自己的源代码，那么，显然，程序中应该有“print ...”语句。但 print 什么出来呢？如果硬要写的话就会变成：</p>

<blockquote><div>print "print \"print ......\""</div></blockquote>

<p>　　最后是一个无限循环。</p>
<p>　　一般地，我们知道，如果程序 A 能产生程序 B ，那么 A 必须包含 B 的全部信息，而且应该比 B 的信息还多，因为还要包含额外的打印语句。也就是说，一般情况下，信息是减少的。而这个自产生程序，自己要包含自己的全部信息，从某种程度上已经具有生命的意味了。</p>

<p>　　下面是 Python 版：</p>
<pre class="brush: python">
s = '\'s = \' + repr(s) + \'\\nprint \' + s'
print 's = ' + repr(s) + '\nprint ' + s
</pre>

<p>　　一个 Lua 版：</p>
<pre class="brush: lua">
s = 'string.format(\'s = %q\\nprint(%s)\', s, s)'
print(string.format('s = %q\nprint(%s)', s, s))
</pre>

<p>　　Bash：</p>
<pre class="brush: bash">
#!/bin/bash
s='\x22#!/bin/bash\ns=\x27$s\x27\necho $(echo -e $s)\x22'
echo "#!/bin/bash
s='$s'
echo $(echo -e $s)"
</pre>

<p>　　C ：</p>
<pre class="brush: cpp">
#define p(a) int main(){a;puts("p("#a")");return 0;}
p(puts("#define p(a) int main(){a;puts(\"p(\"#a\")\");return 0;}"))
</pre>

<p>　　至于它们是怎么实现的，就留给读者自己琢磨了。自产生程序也称为 <a href="http://en.wikipedia.org/wiki/Quine_(computing)">Quine</a> ，可以参考 <a href="http://www.nyx.net/~gthompso/quine.htm">Quine Page</a> 。</p>
